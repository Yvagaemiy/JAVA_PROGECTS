package semenar_6.HOME_WORK;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

// –î–ó
// üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ —Å –ø–æ–º–æ—â—å—é HashMap
// üìå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –≤ –≤–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±—É–¥—É—Ç
// –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏, –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—á–∏—Ç–∞—Ç—å, –∫–∞–∫ –æ–¥–Ω–æ–≥–æ
// —á–µ–ª–æ–≤–µ–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏. –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é
// —á–∏—Å–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤.


import java.util.*;

    public class hw_001 {
        private static Map<String, Set<String>> phoneBook = new HashMap<>();
        private static Scanner scanner = new Scanner(System.in);
    
        public static void main(String[] args) {
            boolean run = true;
            while (run) {
                hr();// –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—è–µ—Ç 
                System.out.println("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞:\n");
                System.out.println("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã");
                System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
                System.out.println("3. –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
                System.out.println("4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç");
                System.out.println("5. –í—ã–π—Ç–∏");
                System.out.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –¥–µ–π—Å—Ç–≤–∏–π: ");
                int choice = scanner.nextInt();
                scanner.nextLine();
                clear_console();//—á–∏—Å—Ç–∏—Ç –∫–æ–Ω—Å–æ–ª—å
    
                switch (choice) {
                    case 1:
                        loock_contact();
                        break;
                    case 2:
                         add_contact() ;
                        break;
                    case 3:
                        del_contact();
                        break;
                    case 4:
                        edit_contact();
                        break;
                    case 5:
                        running = false;
                        break;
                    default:
                        System.out.println("\n–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.\n");
                }
            }
            System.out.println("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.\n");
        }
    
        private static void loock_contact(){
            if (phoneBook.isEmpty()) {
                System.out.println("\n–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞—è.\n");
            } else {
                List<Map.Entry<String, Set<String>>> sortedEntries = new ArrayList<>(phoneBook.entrySet());
                sortedEntries.sort((entry1, entry2) -> Integer.compare(entry2.getValue().size(), entry1.getValue().size()));
                hr();
                System.out.println("–ó–∞–ø–∏—Å–∏ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–µ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —á–∏—Å–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤):\n");
                for (Map.Entry<String, Set<String>> entry : sortedEntries) {
                    System.out.println(entry.getKey() + ": " + entry.getValue());
                }
            }
            waitEnter();
        }
    
        private static void add_contact() {
            hr();
            System.out.print("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò\n\n");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
            String name = scanner.nextLine();
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ");
            String phoneNumber = scanner.nextLine();
            phoneBook.computeIfAbsent(name, k -> new HashSet<>()).add(phoneNumber);
            System.out.println("\n–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: " + name + ": " + phoneNumber);
            waitEnter();
        }
        private static void del_contact() {
            hr();
            System.out.print("–£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò\n\n");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
            String name = scanner.nextLine();
            if (phoneBook.containsKey(name)) {
                Set<String> phoneNumbers = phoneBook.remove(name);
                System.out.println("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: " + name + ": " + phoneNumbers);
            } else {
                System.out.println("–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }
            waitEnter();
        }
    
        private static void edit_contact() {
            hr();
            System.out.print("–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–ò–°–ò\n\n");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ");
            String name = scanner.nextLine();
            if (phoneBook.containsKey(name)) {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ");
                String newPhoneNumber = scanner.nextLine();
                phoneBook.get(name).add(newPhoneNumber);
                System.out.println("–ó–∞–ø–∏—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: " + name + ": " + phoneBook.get(name));
            } else {
                System.out.println("–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            }
            waitEnter();
        }
    //—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é
        private static void waitEnter() {
            System.out.print("\n–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
            scanner.nextLine();
            clear_console();
        }
        // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–¥–µ–ª—è–µ—Ç –ø—É–Ω—Ç–∏—Ä–æ–º
        private static void hr() {
            System.out.println("\n--------------------------------");
        }
        // —Ñ—É–Ω–∫—Ü–∏—è —á–∏—Å—Ç–∏—Ç –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –¥–æ—Å—Ç–µ–∂–µ–Ω–∏—è 20 —Å—Ç—Ä–æ–∫
        public static void clear_console() {
            for (int i = 0; i < 20; i++) {
                System.out.println();
            }
        }
    }